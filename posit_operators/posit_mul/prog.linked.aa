$volatile $module [classify_FP19]
$in ( num : $uint<19>  )
$out ( zero : $uint<1>   inf : $uint<1>   normal : $uint<1>  )
$is
{
  $volatile sign := (num [] 18 ) $buffering 1
  $volatile exponent := ( $slice num 17 12 )  $buffering 1
  $volatile fraction := ( $slice num 11 0 )  $buffering 1
  normal := (exponent < 57 ) $buffering 1
  zero := (( ~ sign ) & (exponent == 63 )) $buffering 1
  inf := (sign & (exponent == 63 )) $buffering 1
}
$volatile $module [shift_toMake_regime]
$in ( shift : $uint<4>   reg_type : $uint<1>  )
$out ( regime : $uint<16>  )
$is
{
  $constant  ONE_1 : $uint<1>:= 1  
  $constant  ONE_2 : $uint<2>:= _b11  
  $constant  ONE_4 : $uint<4>:= _b1111  
  $constant  ONE_8 : $uint<8>:= _b11111111  
  temp := ((($bitcast ($uint<1>) _b0 ) && ( $mux reg_type ONE_1  ($bitcast ($uint<1>) _b0 ) ) ) && (( $mux reg_type ($bitcast ($uint<1>) _b0 )  ONE_1 )  && ($bitcast ($uint<13>) _b0 ))) $buffering 1
  X0 := ( $mux (shift [] 0 ) ((temp >> 1 ) | ((($bitcast ($uint<1>) _b0 ) && ( $mux reg_type ONE_1  ($bitcast ($uint<1>) _b0 ) ) ) && ($bitcast ($uint<14>) _b0 )))  temp )  $buffering 1
  X1 := ( $mux (shift [] 1 ) ((X0 >> 2 ) | ((($bitcast ($uint<1>) _b0 ) && ( $mux reg_type ONE_2  ($bitcast ($uint<2>) _b0 ) ) ) && ($bitcast ($uint<13>) _b0 )))  X0 )  $buffering 1
  X2 := ( $mux (shift [] 2 ) ((X1 >> 4 ) | ((($bitcast ($uint<1>) _b0 ) && ( $mux reg_type ONE_4  ($bitcast ($uint<4>) _b0 ) ) ) && ($bitcast ($uint<11>) _b0 )))  X1 )  $buffering 1
  regime := ( $mux (shift [] 3 ) ((X2 >> 8 ) | ((($bitcast ($uint<1>) _b0 ) && ( $mux reg_type ONE_8  ($bitcast ($uint<8>) _b0 ) ) ) && ($bitcast ($uint<7>) _b0 )))  X2 )  $buffering 1
}
$volatile $module [find_leftmost_bit_2]
$in ( num : $uint<2>   bit : $uint<1>  )
$out ( index : $uint<6>   not_found : $uint<1>  )
$is
{
  $volatile first_bit := ((num [] 0 ) == (bit [] 0 )) $buffering 1
  $volatile second_bit := ((num [] 1 ) == (bit [] 0 )) $buffering 1
  not_found := ( ~ (first_bit | second_bit) ) $buffering 1
  index := ($bitcast ($uint<6>) ( $mux second_bit ($bitcast ($uint<1>) _b1 )  ($bitcast ($uint<1>) _b0 ) )  ) $buffering 1
}
$volatile $module [find_leftmost_bit_4]
$in ( num : $uint<4>   bit : $uint<1>  )
$out ( index : $uint<6>   not_found : $uint<1>  )
$is
{
  $volatile num_h := ( $slice num 3 2 )  $buffering 1
  $volatile num_l := ( $slice num 1 0 )  $buffering 1
  $volatile 	$call find_leftmost_bit_2 (num_h bit ) (index_h not_found_h ) 
  $volatile 	$call find_leftmost_bit_2 (num_l bit ) (index_l not_found_l ) 
  $volatile ind_h := (index_h + 2 ) $buffering 1
  not_found := (not_found_h & not_found_l) $buffering 1
  index := ($bitcast ($uint<6>) ( $mux not_found_h index_l  ind_h )  ) $buffering 1
}
$volatile $module [find_leftmost_bit_8]
$in ( num : $uint<8>   bit : $uint<1>  )
$out ( index : $uint<6>   not_found : $uint<1>  )
$is
{
  $volatile num_h := ( $slice num 7 4 )  $buffering 1
  $volatile num_l := ( $slice num 3 0 )  $buffering 1
  $volatile 	$call find_leftmost_bit_4 (num_h bit ) (index_h not_found_h ) 
  $volatile 	$call find_leftmost_bit_4 (num_l bit ) (index_l not_found_l ) 
  $volatile ind_h := (index_h + 4 ) $buffering 1
  not_found := (not_found_h & not_found_l) $buffering 1
  index := ($bitcast ($uint<6>) ( $mux not_found_h index_l  ind_h )  ) $buffering 1
}
$volatile $module [find_leftmost_bit_16]
$in ( num : $uint<16>   bit : $uint<1>  )
$out ( index : $uint<6>   not_found : $uint<1>  )
$is
{
  $volatile num_h := ( $slice num 15 8 )  $buffering 1
  $volatile num_l := ( $slice num 7 0 )  $buffering 1
  $volatile 	$call find_leftmost_bit_8 (num_h (bit [] 0 ) ) (index_h not_found_h ) 
  $volatile 	$call find_leftmost_bit_8 (num_l (bit [] 0 ) ) (index_l not_found_l ) 
  $volatile ind_h := (index_h + 8 ) $buffering 1
  not_found := (not_found_h & not_found_l) $buffering 1
  index := ($bitcast ($uint<6>) ( $mux not_found_h index_l  ind_h )  ) $buffering 1
}
$volatile $module [sll_16]
$in ( num : $uint<16>   shift : $uint<4>  )
$out ( shifted : $uint<16>  )
$is
{
  X0 := ( $mux (shift [] 0 ) (( $slice num 14 0 )  && ($bitcast ($uint<1>) _b0 ))  num )  $buffering 1
  X1 := ( $mux (shift [] 1 ) (( $slice X0 13 0 )  && ($bitcast ($uint<2>) _b0 ))  X0 )  $buffering 1
  X2 := ( $mux (shift [] 2 ) (( $slice X1 11 0 )  && ($bitcast ($uint<4>) _b0 ))  X1 )  $buffering 1
  X3 := ( $mux (shift [] 3 ) (( $slice X2 7 0 )  && ($bitcast ($uint<8>) _b0 ))  X2 )  $buffering 1
  shifted := X3 $buffering 1
}
$volatile $module [make_exponent]
$in ( num : $uint<6>  )
$out ( reg_exp : $uint<16>  )
$is
{
  $volatile odd := ((num & 1 ) > 0 ) $buffering 1
  $volatile reg_type := (num > 27 ) $buffering 1
  x := (reg_type | odd) $buffering 1
  $volatile reg_cnt := ((( $mux reg_type (num - 28 )  (28  - num) )  >> 1 ) + ( $mux x 1   0  ) ) $buffering 1
  $volatile 	$call shift_toMake_regime (($bitcast ($uint<4>) (reg_cnt - 1 ) ) reg_type ) (regime ) 
  $volatile temp := ( $mux reg_type (regime | (($bitcast ($uint<1>) _b1 ) && ($bitcast ($uint<15>) _b0 )))  regime )  $buffering 1
  $volatile 	$call find_leftmost_bit_16 (temp ( ~ reg_type ) ) (r_dash_index not_found ) 
  $volatile 	$call sll_16 (($bitcast ($uint<16>) _b1 ) ($bitcast ($uint<4>) (r_dash_index - 1 ) ) ) (shifted_1_exponent ) 
  $volatile is_there_exp := (reg_cnt < 14 ) $buffering 1
  reg_exp := (regime | ( $mux (odd & is_there_exp) shifted_1_exponent  ($bitcast ($uint<16>) _b0 ) ) ) $buffering 1
}
$volatile $module [shift_toMake_fraction]
$in ( num : $uint<17>   shift : $uint<4>  )
$out ( fraction : $uint<17>  )
$is
{
  X0 := ( $mux (shift [] 0 ) (num >> 1 )  num )  $buffering 1
  X1 := ( $mux (shift [] 1 ) (X0 >> 2 )  X0 )  $buffering 1
  X2 := ( $mux (shift [] 2 ) (X1 >> 4 )  X1 )  $buffering 1
  fraction := ( $mux (shift [] 3 ) (X2 >> 8 )  X2 )  $buffering 1
}
$volatile $module [make_fraction]
$in ( num : $uint<6>   frac : $uint<12>  )
$out ( fraction : $uint<16>  )
$is
{
  $volatile odd := ((num & 1 ) > 0 ) $buffering 1
  $volatile reg_type := (num > 27 ) $buffering 1
  x := (reg_type | odd) $buffering 1
  $volatile reg_cnt := ((( $mux reg_type (num - 28 )  (28  - num) )  >> 1 ) + ( $mux x 1   0  ) ) $buffering 1
  $volatile 	$call shift_toMake_fraction ((frac && ($bitcast ($uint<5>) _b0 )) ($bitcast ($uint<4>) (reg_cnt + 3 ) ) ) (fraction_1 ) 
  $volatile is_there_frac := (reg_cnt < 13 ) $buffering 1
  $volatile fraction_2 := ( $slice fraction_1 16 1 )  $buffering 1
  fraction := ( $mux is_there_frac ( $mux (fraction_1 [] 0 ) (fraction_2 + 1 )  fraction_2 )   ($bitcast ($uint<16>) _b0 ) )  $buffering 1
}
$volatile $module [FP19_to_posit16]
$in ( F : $uint<19>  )
$out ( P : $uint<16>  )
$is
{
  $volatile 	$call classify_FP19 (( $slice F 18 0 )  ) (zero inf normal ) 
  $volatile sign := (F [] 18 ) $buffering 1
  $volatile exponent := ( $slice F 17 12 )  $buffering 1
  $volatile fraction := ( $slice F 11 0 )  $buffering 1
  $volatile 	$call make_exponent (exponent ) (posit_exp ) 
  $volatile 	$call make_fraction (exponent fraction ) (posit_frac ) 
  P := ($bitcast ($uint<16>) ( $mux normal (posit_exp | posit_frac)  ( $mux zero ($bitcast ($uint<16>) _b0 )  (($bitcast ($uint<1>) _b1 ) && ($bitcast ($uint<15>) _b0 )) )  )  ) $buffering 1
}
$volatile $module [check_overflow_underflow]
$in ( num : $int<8>  )
$out ( overflow : $uint<1>   underflow : $uint<1>  )
$is
{
  overflow := (num > 28 ) $buffering 1
  underflow := (num < -28 ) $buffering 1
}
$volatile $module [classifyFp19]
$in ( num : $uint<19>  )
$out ( zero : $uint<1>   normal : $uint<1>   inf : $uint<1>  )
$is
{
  $volatile exp := ( $slice num 17 12 )  $buffering 1
  normal := (exp < 57 ) $buffering 1
  zero := 0  $buffering 1
  inf := 0  $buffering 1
}
$volatile $module [classify_FP32]
$in ( F : $uint<32>  )
$out ( zero : $uint<1>   normal : $uint<1>   inf : $uint<1>  )
$is
{
  $volatile exp := (($bitcast ($uint<8>) ( $slice F 30 23 )  ) - 127 ) $buffering 1
  zero := (exp < -28 ) $buffering 1
  normal := ((exp > -29 ) & (exp < 29 )) $buffering 1
  inf := (exp > 28 ) $buffering 1
}
$volatile $module [classify_posit]
$in ( num : $uint<16>  )
$out ( zero : $uint<1>   normal : $uint<1>   inf : $uint<1>  )
$is
{
  $volatile exp_all_zero := (( $slice num 14 0 )  == 0 ) $buffering 1
  normal := ( ~ exp_all_zero ) $buffering 1
  zero := (( ~ (num [] 15 ) ) & exp_all_zero) $buffering 1
  inf := ((num [] 15 ) & exp_all_zero) $buffering 1
}
$volatile $module [complement]
$in ( num : $uint<16>  )
$out ( result : $uint<16>  )
$is
{
  $volatile convert := (($bitcast ($uint<1>) _b1 ) && ($bitcast ($uint<16>) _b0 )) $buffering 1
  $volatile res_temp := (convert - (($bitcast ($uint<1>) _b0 ) && num)) $buffering 1
  result := ( $slice res_temp 15 0 )  $buffering 1
}
$volatile $module [fmul19]
$in ( f1 : $uint<19>   f2 : $uint<19>  )
$out ( result : $uint<19>  )
$is
{
  $constant  ONE_1 : $uint<1>:= 1  
  $constant  INF_19 : $uint<19>:= 520192  
  $constant  ZERO_19 : $uint<19>:= 258048  
  $volatile 	$call classifyFp19 (f1 ) (f1_zero f1_normal f1_inf ) 
  $volatile 	$call classifyFp19 (f2 ) (f2_zero f2_normal f2_inf ) 
  $volatile sign_f1 := ( $slice f1 18 18 )  $buffering 1
  $volatile f1_exp_biased := ( $slice f1 17 12 )  $buffering 1
  $volatile f1_fraction := ( $slice f1 11 0 )  $buffering 1
  $volatile exp_a := (($bitcast ($int<8>) f1_exp_biased ) - 28 ) $buffering 1
  $volatile sign_f2 := ( $slice f2 18 18 )  $buffering 1
  $volatile f2_exp_biased := ( $slice f2 17 12 )  $buffering 1
  $volatile f2_fraction := ( $slice f2 11 0 )  $buffering 1
  $volatile exp_b := (($bitcast ($int<8>) f2_exp_biased ) - 28 ) $buffering 1
  $volatile exp_ab := (exp_a + exp_b) $buffering 1
  $volatile sign_result := (sign_f1 ^ sign_f2) $buffering 1
  $volatile f1_frac := (ONE_1 && f1_fraction) $buffering 1
  $volatile f2_frac := (ONE_1 && f2_fraction) $buffering 1
  frac_result_ext := (($bitcast ($uint<26>) f1_frac ) * ($bitcast ($uint<26>) f2_frac )) $buffering 1
  $volatile shift_by_one := (frac_result_ext [] 25 ) $buffering 1
  $volatile frac_result := ( $mux shift_by_one ( $slice frac_result_ext 24 13 )   ( $slice frac_result_ext 23 12 )  )  $buffering 1
  $volatile adjusted_exponent := ( $mux shift_by_one (exp_ab + 1 )  exp_ab )  $buffering 1
  $volatile exponent_result := ($bitcast ($uint<6>) (adjusted_exponent + 28 ) ) $buffering 1
  $volatile 	$call check_overflow_underflow (adjusted_exponent ) (overflow underflow ) 
  result := ( $mux ((f1_inf | f2_inf) | overflow) INF_19  ( $mux ((f1_zero | f2_zero) | underflow) ZERO_19  ((sign_result && exponent_result) && frac_result) )  )  $buffering 1
  $attribute delay 2
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $null
}
$volatile $module [split_posit]
$in ( num : $uint<16>  )
$out ( sign : $uint<1>   exp : $uint<6>   fraction : $uint<12>  )
$is
{
  $constant  ONE_2 : $uint<2>:= 3  
  $volatile regime_bit := (num [] 14 ) $buffering 1
  $volatile start_2_bits := ( $mux regime_bit ONE_2  ($bitcast ($uint<2>) _b0 ) )  $buffering 1
  $volatile temp_num := (start_2_bits && ( $slice num 13 0 ) ) $buffering 1
  $volatile 	$call find_leftmost_bit_16 (temp_num ( ~ regime_bit ) ) (index not_found ) 
  $volatile frac_shift := ($bitcast ($uint<4>) (17  - index) ) $buffering 1
  $volatile exp_shift := ($bitcast ($uint<4>) (16  - index) ) $buffering 1
  $volatile reg_cnt := (14  - index) $buffering 1
  $volatile reg_cnt_gen := ( $mux regime_bit (reg_cnt - 1 )  reg_cnt )  $buffering 1
  $volatile reg_mul2 := (2  * reg_cnt_gen) $buffering 1
  $volatile 	$call sll_16 (num exp_shift ) (shifted_to_find_exp ) 
  $volatile exp_bit := ($bitcast ($uint<6>) (shifted_to_find_exp [] 15 ) ) $buffering 1
  $volatile exp_biased := (( $mux regime_bit (28  + reg_mul2)  (28  - reg_mul2) )  + exp_bit) $buffering 1
  $volatile 	$call sll_16 (num frac_shift ) (shifted_frac ) 
  exp := ($bitcast ($uint<6>) exp_biased ) $buffering 1
  sign := (num [] 15 ) $buffering 1
  fraction := ( $slice shifted_frac 15 4 )  $buffering 1
}
$volatile $module [posit16_to_FP19]
$in ( P : $uint<16>  )
$out ( F : $uint<19>  )
$is
{
  $constant  INF_19 : $uint<19>:= 520192  
  $constant  ZERO_19 : $uint<19>:= 258048  
  $volatile 	$call classify_posit (P ) (zero normal inf ) 
  $volatile 	$call split_posit (P ) (sign exp fraction ) 
  $volatile 	$call complement (P ) (P_c ) 
  $volatile 	$call split_posit (P_c ) (sign_c exp_c fraction_c ) 
  F := ( $mux normal ( $mux sign ((($bitcast ($uint<1>) _b1 ) && exp_c) && fraction_c)  ((($bitcast ($uint<1>) _b0 ) && exp) && fraction) )   ( $mux zero ZERO_19  INF_19 )  )  $buffering 1
}
$module [pmul19]
$in ( P1 : $uint<16>   P2 : $uint<16>  )
$out ( result : $uint<16>  )
$is
{
  $volatile 	$call posit16_to_FP19 (P1 ) (F1 ) 
  $volatile 	$call posit16_to_FP19 (P2 ) (F2 ) 
  $volatile 	$call fmul19 (F1 F2 ) (F19_res ) 
  $volatile 	$call FP19_to_posit16 (F19_res ) (result ) 
}
// use of gated clocks in modules 
