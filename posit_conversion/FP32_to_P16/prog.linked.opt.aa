$volatile $module [classify_FP32]
$in ( F : $uint<32>  )
$out ( zero : $uint<1>   normal : $uint<1>   inf : $uint<1>  )
$is
{
  $volatile exp := (($bitcast ($int<8>) ( $slice F 30 23 )  ) - 127 ) $buffering 1
  zero := (exp < -28 ) $buffering 1
  normal := ((exp > -29 ) & (exp < 29 )) $buffering 1
  inf := (exp > 28 ) $buffering 1
}
$volatile $module [shift_toMake_regime]
$in ( shift : $uint<4>   reg_type : $uint<1>  )
$out ( regime : $uint<16>  )
$is
{
  $constant  ONE_1 : $uint<1>:= 1  
  $constant  ONE_2 : $uint<2>:= _b11  
  $constant  ONE_4 : $uint<4>:= _b1111  
  $constant  ONE_8 : $uint<8>:= _b11111111  
  temp := ((($bitcast ($uint<1>) _b0  ) && ( $mux reg_type ONE_1  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux reg_type ($bitcast ($uint<1>) _b0  )  ONE_1 )  && ($bitcast ($uint<13>) _b0  ))) $buffering 1
  X0 := ( $mux (shift [] 0 ) ((temp >> 1 ) | ((($bitcast ($uint<1>) _b0  ) && ( $mux reg_type ONE_1  ($bitcast ($uint<1>) _b0  ) ) ) && ($bitcast ($uint<14>) _b0  )))  temp )  $buffering 1
  X1 := ( $mux (shift [] 1 ) ((X0 >> 2 ) | ((($bitcast ($uint<1>) _b0  ) && ( $mux reg_type ONE_2  ($bitcast ($uint<2>) _b0  ) ) ) && ($bitcast ($uint<13>) _b0  )))  X0 )  $buffering 1
  X2 := ( $mux (shift [] 2 ) ((X1 >> 4 ) | ((($bitcast ($uint<1>) _b0  ) && ( $mux reg_type ONE_4  ($bitcast ($uint<4>) _b0  ) ) ) && ($bitcast ($uint<11>) _b0  )))  X1 )  $buffering 1
  regime := ( $mux (shift [] 3 ) ((X2 >> 8 ) | ((($bitcast ($uint<1>) _b0  ) && ( $mux reg_type ONE_8  ($bitcast ($uint<8>) _b0  ) ) ) && ($bitcast ($uint<7>) _b0  )))  X2 )  $buffering 1
}
$volatile $module [find_leftmost_bit_2]
$in ( num : $uint<2>   bit : $uint<1>  )
$out ( index : $uint<6>   not_found : $uint<1>  )
$is
{
  $volatile first_bit := ((num [] 0 ) == (bit [] 0 )) $buffering 1
  $volatile second_bit := ((num [] 1 ) == (bit [] 0 )) $buffering 1
  not_found := ( ~ (first_bit | second_bit) ) $buffering 1
  index := ($bitcast ($uint<6>) ( $mux second_bit ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  ) $buffering 1
}
$volatile $module [find_leftmost_bit_4]
$in ( num : $uint<4>   bit : $uint<1>  )
$out ( index : $uint<6>   not_found : $uint<1>  )
$is
{
  $volatile num_h := ( $slice num 3 2 )  $buffering 1
  $volatile num_l := ( $slice num 1 0 )  $buffering 1
  $volatile 	$call find_leftmost_bit_2 (num_h bit ) (index_h not_found_h ) 
  $volatile 	$call find_leftmost_bit_2 (num_l bit ) (index_l not_found_l ) 
  $volatile ind_h := (index_h + 2 ) $buffering 1
  not_found := (not_found_h & not_found_l) $buffering 1
  index := ($bitcast ($uint<6>) ( $mux not_found_h index_l  ind_h )  ) $buffering 1
}
$volatile $module [find_leftmost_bit_8]
$in ( num : $uint<8>   bit : $uint<1>  )
$out ( index : $uint<6>   not_found : $uint<1>  )
$is
{
  $volatile num_h := ( $slice num 7 4 )  $buffering 1
  $volatile num_l := ( $slice num 3 0 )  $buffering 1
  $volatile 	$call find_leftmost_bit_4 (num_h bit ) (index_h not_found_h ) 
  $volatile 	$call find_leftmost_bit_4 (num_l bit ) (index_l not_found_l ) 
  $volatile ind_h := (index_h + 4 ) $buffering 1
  not_found := (not_found_h & not_found_l) $buffering 1
  index := ($bitcast ($uint<6>) ( $mux not_found_h index_l  ind_h )  ) $buffering 1
}
$volatile $module [find_leftmost_bit_16]
$in ( num : $uint<16>   bit : $uint<1>  )
$out ( index : $uint<6>   not_found : $uint<1>  )
$is
{
  $volatile num_h := ( $slice num 15 8 )  $buffering 1
  $volatile num_l := ( $slice num 7 0 )  $buffering 1
  $volatile 	$call find_leftmost_bit_8 (num_h (bit [] 0 ) ) (index_h not_found_h ) 
  $volatile 	$call find_leftmost_bit_8 (num_l (bit [] 0 ) ) (index_l not_found_l ) 
  $volatile ind_h := (index_h + 8 ) $buffering 1
  not_found := (not_found_h & not_found_l) $buffering 1
  index := ($bitcast ($uint<6>) ( $mux not_found_h index_l  ind_h )  ) $buffering 1
}
$volatile $module [sll_16]
$in ( num : $uint<16>   shift : $uint<4>  )
$out ( shifted : $uint<16>  )
$is
{
  X0 := ( $mux (shift [] 0 ) (( $slice num 14 0 )  && ($bitcast ($uint<1>) _b0  ))  num )  $buffering 1
  X1 := ( $mux (shift [] 1 ) (( $slice X0 13 0 )  && ($bitcast ($uint<2>) _b0  ))  X0 )  $buffering 1
  X2 := ( $mux (shift [] 2 ) (( $slice X1 11 0 )  && ($bitcast ($uint<4>) _b0  ))  X1 )  $buffering 1
  shifted := ( $mux (shift [] 3 ) (( $slice X2 7 0 )  && ($bitcast ($uint<8>) _b0  ))  X2 )  $buffering 1
}
$volatile $module [make_exponent]
$in ( num : $uint<6>  )
$out ( reg_exp : $uint<16>  )
$is
{
  $volatile odd := ((num & 1 ) > 0 ) $buffering 1
  $volatile reg_type := (num > 27 ) $buffering 1
  x := (reg_type | odd) $buffering 1
  $volatile reg_cnt := ((( $mux reg_type (num - 28 )  (28  - num) )  >> 1 ) + ( $mux x 1   0  ) ) $buffering 1
  $volatile 	$call shift_toMake_regime (($bitcast ($uint<4>) (reg_cnt - 1 ) ) reg_type ) (regime ) 
  $volatile temp := ( $mux reg_type (regime | (($bitcast ($uint<1>) _b1  ) && ($bitcast ($uint<15>) _b0  )))  regime )  $buffering 1
  $volatile 	$call find_leftmost_bit_16 (temp ( ~ reg_type ) ) (r_dash_index not_found ) 
  $volatile 	$call sll_16 (($bitcast ($uint<16>) _b1  ) ($bitcast ($uint<4>) (r_dash_index - 1 ) ) ) (shifted_1_exponent ) 
  $volatile is_there_exp := (reg_cnt < 14 ) $buffering 1
  reg_exp := (regime | ( $mux (odd & is_there_exp) shifted_1_exponent  ($bitcast ($uint<16>) _b0  ) ) ) $buffering 1
}
$volatile $module [shift_toMake_fraction]
$in ( num : $uint<17>   shift : $uint<4>  )
$out ( fraction : $uint<17>  )
$is
{
  X0 := ( $mux (shift [] 0 ) (num >> 1 )  num )  $buffering 1
  X1 := ( $mux (shift [] 1 ) (X0 >> 2 )  X0 )  $buffering 1
  X2 := ( $mux (shift [] 2 ) (X1 >> 4 )  X1 )  $buffering 1
  fraction := ( $mux (shift [] 3 ) (X2 >> 8 )  X2 )  $buffering 1
}
$volatile $module [make_fraction]
$in ( num : $uint<6>   frac : $uint<12>  )
$out ( fraction : $uint<16>  )
$is
{
  $volatile odd := ((num & 1 ) > 0 ) $buffering 1
  $volatile reg_type := (num > 27 ) $buffering 1
  x := (reg_type | odd) $buffering 1
  $volatile reg_cnt := ((( $mux reg_type (num - 28 )  (28  - num) )  >> 1 ) + ( $mux x 1   0  ) ) $buffering 1
  $volatile 	$call shift_toMake_fraction ((frac && ($bitcast ($uint<5>) _b0  )) ($bitcast ($uint<4>) (reg_cnt + 3 ) ) ) (fraction_1 ) 
  $volatile is_there_frac := (reg_cnt < 13 ) $buffering 1
  $volatile fraction_2 := ( $slice fraction_1 16 1 )  $buffering 1
  fraction := ( $mux is_there_frac ( $mux (fraction_1 [] 0 ) (fraction_2 + 1 )  fraction_2 )   ($bitcast ($uint<16>) _b0  ) )  $buffering 1
}
$volatile $module [complement]
$in ( num : $uint<16>  )
$out ( result : $uint<16>  )
$is
{
  $volatile convert := (($bitcast ($uint<1>) _b1  ) && ($bitcast ($uint<16>) _b0  )) $buffering 1
  $volatile res_temp := (convert - (($bitcast ($uint<1>) _b0  ) && num)) $buffering 1
  result := ( $slice res_temp 15 0 )  $buffering 1
}
$module [FP32_to_posit16]
$in ( F : $uint<32>  )
$out ( P : $uint<16>  )
$is
{
  $volatile 	$call classify_FP32 (F ) (zero normal inf ) 
  $volatile exp_biased_28 := ( $slice (( $slice F 30 23 )  - 99 ) 5 0 )  $buffering 1
  $volatile 	$call make_exponent (exp_biased_28 ) (posit_exp ) 
  $volatile 	$call make_fraction (exp_biased_28 ( $slice F 22 11 )  ) (posit_frac ) 
  $volatile posit_wo_sign := (posit_exp | posit_frac) $buffering 1
  $volatile 	$call complement (posit_wo_sign ) (posit_c ) 
  P := ( $mux normal ( $mux (F [] 31 ) posit_c  posit_wo_sign )   ( $mux zero ($bitcast ($uint<16>) _b0  )  (($bitcast ($uint<1>) _b1  ) && ($bitcast ($uint<15>) _b0  )) )  )  $buffering 1// bits of buffering = 16. 
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $null
}
// use of gated clocks in modules 
